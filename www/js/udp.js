// Конфигурация
const UDP_CONFIG = {
    port: 14550,
    address: '0.0.0.0',
    bufferSize: 1024
};

let udpSocketId = null;

function startUDPListener() {
    logMessage('рџ”„ Creating UDP socket...');
    // РЎРѕР·РґР°РµРј UDP СЃРѕРєРµС‚
    chrome.sockets.udp.create({}, function(createInfo) {
        if (!createInfo || createInfo.socketId === undefined) {
            logMessage('вќЊ Failed to create UDP socket: ' + chrome.runtime.lastError.message);
            return;
        }
        
        udpSocketId = createInfo.socketId;
        logMessage(`вњ… UDP socket created (ID: ${udpSocketId})`);
        
        // РќР°СЃС‚СЂР°РёРІР°РµРј РѕР±СЂР°Р±РѕС‚С‡РёРє РІС…РѕРґСЏС‰РёС… РґР°РЅРЅС‹С…
        setupReceiveHandler();
        
        // Р‘РёРЅРґРёРј СЃРѕРєРµС‚ РЅР° РїРѕСЂС‚
        chrome.sockets.udp.bind(udpSocketId, UDP_CONFIG.address, UDP_CONFIG.port, function(result) {
            if (result < 0) {
                logMessage('вќЊ Failed to bind UDP socket: ' + result);
                cleanupSocket();
                return;
            }
            
            logMessage(`вњ… Listening on UDP ${UDP_CONFIG.address}:${UDP_CONFIG.port}`);
            updateUDPStatus('Listening');
                       
            // РЈСЃС‚Р°РЅР°РІР»РёРІР°РµРј СЂР°Р·РјРµСЂ Р±СѓС„РµСЂР°
            chrome.sockets.udp.setPaused(udpSocketId, false, function() {
                logMessage('вњ… UDP receiver activated');
            });
        });
    });
}

function setupReceiveHandler() {
    // РћР±СЂР°Р±РѕС‚С‡РёРє РІС…РѕРґСЏС‰РёС… UDP РїР°РєРµС‚РѕРІ
    chrome.sockets.udp.onReceive.addListener(function(receiveInfo) {
        // РџСЂРѕРІРµСЂСЏРµРј С‡С‚Рѕ РїР°РєРµС‚ РѕС‚ РЅР°С€РµРіРѕ СЃРѕРєРµС‚Р°
        if (receiveInfo.socketId !== udpSocketId) return;
        
        try {
            // Р”Р°РЅРЅС‹Рµ РїСЂРёС…РѕРґСЏС‚ РєР°Рє ArrayBuffer
            const data = receiveInfo.data;
            handleMAVLinkData(data);
            
            // Р›РѕРіРёСЂСѓРµРј РёСЃС‚РѕС‡РЅРёРє (РѕРїС†РёРѕРЅР°Р»СЊРЅРѕ)
            // logMessage(`рџ“Ё From: ${receiveInfo.remoteAddress}:${receiveInfo.remotePort}`);
            
        } catch (error) {
            console.error('Error processing UDP data:', error);
            logMessage('вќЊ Error processing UDP data');
        }
    });
    
    // РћР±СЂР°Р±РѕС‚С‡РёРє РѕС€РёР±РѕРє
    chrome.sockets.udp.onReceiveError.addListener(function(errorInfo) {
        if (errorInfo.socketId === udpSocketId) {
            logMessage('вќЊ UDP receive error: ' + errorInfo.resultCode);
        }
    });
}

function stopUDPListener() {
    if (udpSocketId !== null) {
        logMessage('рџ”„ Stopping UDP listener...');
        
        chrome.sockets.udp.close(udpSocketId, function() {
            logMessage('вњ… UDP listener stopped');
            cleanupSocket();
        });
    }
}

function cleanupSocket() {
    udpSocketId = null;
    updateUDPStatus('Disconnected');
}

function updateUDPStatus(status) {
    const element = document.getElementById('udp-status');
    if (element) {
        element.textContent = status;
        element.style.color = status === 'Listening' ? 'green' : 'red';
    } else {
        console.log(status);
    }
}